homeassistant:
  customize:
    sensor.ev_home_energy_kwh:
      device_class: energy
      state_class: total_increasing
      unit_of_measurement: kWh

# ─────────────────────────────────────────────────────────────────────────────
# INPUT NUMBERS (counters / snapshots)
# ─────────────────────────────────────────────────────────────────────────────
input_number:
  ev_home_energy_alltime_kwh:
    name: EV home energy total (kWh, all time)
    min: 0
    max: 100000
    step: 0.001
    unit_of_measurement: kWh
    mode: box
    initial: 0

  ev_last_session_kwh:
    name: EV last session (kWh)
    min: 0
    max: 100
    step: 0.1
    unit_of_measurement: kWh
    mode: box
    initial: 0

  ev_session_start_energy_kwh:
    name: EV session start energy (kWh, integrated)
    min: 0
    max: 100
    step: 0.1
    unit_of_measurement: kWh
    mode: box
    initial: 0

# ─────────────────────────────────────────────────────────────────────────────
# TEMPLATE SENSORS
# - Bepaalt "thuis laden"
# - Converteert bron (W of kW) → kW
# - Filtert vermogen alleen wanneer thuis & ingeplugd
# ─────────────────────────────────────────────────────────────────────────────
template:
  - binary_sensor:
      - name: EV Charging At Home
        unique_id: ev_charging_at_home_flag
        state: >
          {% set at_home = (states('device_tracker.ev_tank_location') | lower) == 'home' %}
          {% set plugged = is_state('binary_sensor.ev_tank_ev_battery_plug','on') %}
          {# Bepaal bronvermogen in kW, ongeacht of de bron W of kW is #}
          {% set src = states('sensor.ev_tank_ev_charging_power') | float(0) %}
          {% set unit = state_attr('sensor.ev_tank_ev_charging_power','unit_of_measurement') | string %}
          {% set kw = src %}
          {{ at_home and plugged and kw > 0.3 }}   {# negeer ruis < 0.3 kW #}

    sensor:
      # Ruw vermogen van de Kia-bron omgerekend naar kW (geen filtering)
      - name: EV Raw Power kW
        unique_id: ev_raw_power_kw
        unit_of_measurement: kW
        device_class: power
        state_class: measurement
        state: >
          {% set src = states('sensor.ev_tank_ev_charging_power') | float(0) %}
          {% set unit = state_attr('sensor.ev_tank_ev_charging_power','unit_of_measurement') | string %}
          {{ (src / 1000) if unit|lower in ['w','watt'] else src }}

      # Vermogen dat telt voor thuis laden (alleen als thuis & ingeplugd)
      - name: EV Home Charging Power
        unique_id: ev_home_charging_power_kw
        unit_of_measurement: kW
        device_class: power
        state_class: measurement
        state: >
          {% set kw = states('sensor.ev_raw_power_kw') | float(0) %}
          {% if is_state('binary_sensor.ev_charging_at_home','on') %}
            {{ kw }}
          {% else %}
            0
          {% endif %}

      # Publieke cumulatieve energiemeter (komt uit integrator hieronder)
      - name: EV Home Energy Cumulative
        unique_id: ev_home_energy_cumulative_pub
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.ev_home_energy_kwh') | float(0) }}"

      # Kleine tekstsamenvatting van de laatste sessie
      - name: EV Last Session Summary
        unique_id: ev_last_session_summary
        state: >
          Last home session: ~{{ states('input_number.ev_last_session_kwh') | float(0) | round(2) }} kWh

# ─────────────────────────────────────────────────────────────────────────────
# kW → kWh INTEGRATOR (monotoon stijgend)
# ─────────────────────────────────────────────────────────────────────────────
sensor:
  - platform: integration
    name: EV Home Energy (kWh)
    unique_id: ev_home_energy_kwh
    source: sensor.ev_home_charging_power
    unit_time: h
    unit_prefix: k
    round: 4
    method: left

# ─────────────────────────────────────────────────────────────────────────────
# UTILITY METERS (dag/maand)
# ─────────────────────────────────────────────────────────────────────────────
utility_meter:
  ev_home_energy_daily:
    source: sensor.ev_home_energy_kwh
    cycle: daily
  ev_home_energy_monthly:
    source: sensor.ev_home_energy_kwh
    cycle: monthly

# ─────────────────────────────────────────────────────────────────────────────
# AUTOMATIONS (nieuw schema, 2025.x compatibel)
# ─────────────────────────────────────────────────────────────────────────────
automation:
  # Snapshot bij start van een laadsessie
  - alias: "EV (Kia): session start (home, kW→kWh)"
    id: ev_home_session_start_kw
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.ev_charging_at_home
        to: "on"
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.ev_session_start_energy_kwh
        data:
          value: "{{ states('sensor.ev_home_energy_kwh') | float(0) }}"

  # Einde sessie → delta kWh berekenen en optellen
  - alias: "EV (Kia): session end → compute kWh (home, kW→kWh)"
    id: ev_home_session_end_kw
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.ev_charging_at_home
        to: "off"
        for:
          minutes: 3 # 3 min geen vermogen = klaar
      - platform: state
        entity_id: binary_sensor.ev_tank_ev_battery_plug
        to: "off"
      - platform: state
        entity_id: device_tracker.ev_tank_location
        from: "home"
    condition: []
    variables:
      start: "{{ states('input_number.ev_session_start_energy_kwh') | float(0) }}"
      end: "{{ states('sensor.ev_home_energy_kwh') | float(0) }}"
      delta: "{{ (end - start) | float(0) | max(0) }}"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.ev_last_session_kwh
        data:
          value: "{{ delta | round(3) }}"
      - service: input_number.set_value
        target:
          entity_id: input_number.ev_home_energy_alltime_kwh
        data:
          value: >
            {{ (states('input_number.ev_home_energy_alltime_kwh') | float(0) + (delta | float(0))) | round(3) }}
